import glm.installer.Installer
import glm.installer.PkgZipInstallerPackage

import java.text.SimpleDateFormat
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'dev.nokee.cpp-application'
    id 'glm.windows-resources'
    id 'glm.afx-runtime'

    id 'glm.installation-manifest-base'
    id 'glm.pkgzip-installer-package'
}

ext {
    installerFiles = [ (file("${buildDir}")):'zsfx_one' ]

    productName = 'SelfExtractingZipBasedInstaller_One'
    productDescription = 'GLM sample.'

    ZPKG = file("${buildDir}/pkg.zip").path

    targetPath = buildDir.path + '/install'

    installerFileName = "zsfx_one.exe"
    installerFilePath = file("${projectDir}/${installerFileName}").path
}

application(Configure.withDefaultApplicationConfiguration())
application(Configure.addParamH(tasks))
application { app ->
    targetMachines = [machines.windows.x86]
    baseName = 'zsfx_one'

    cppSources.from fileTree(dir: '../zsfx_base', include: '*.cpp')
    windowsResources.from(fileTree(dir: '../zsfx_base', include: '*.rc'))

    parmsH {
        programDescription = "ZSFX_One - Installer"
        defaultPath = "C:\\\\Program Files\\\\ZSFX_One"
        serviceName = "GLM zsfx one"
        runProgram = "dummy\\\\dummy.exe"
    }
}

installationManifests {
    debug {}
    release {}
}
installationManifests.all {
    def buildType = name
    from(application.variants
            .filter { it.buildVariant.hasAxisOf(application.buildTypes.named(buildType)) }
            .flatMap { it.first().developmentBinary }
            .flatMap {
                if (it.buildable) { return it.linkTask }
                return null // no buildable binaries
            }
            .flatMap { it.linkedFile }) {
        into('bin')
    }
}

installers {
    debug {}
    release {}
}
installers.all { Installer installer ->
    manifest(project(':'), 'base') {
        into('wintools') {
            from('LICENSE') { rename('LICENSE', 'ZSFX_ONE_LICENSE.txt') }
            from(versionTextInputFilename) {
                rename(versionTextInputFilename, 'VERSION.txt')
                def date = new Date()
                def day_date_format = new SimpleDateFormat("EEE MM/dd/yyyy")
                def year_format = new SimpleDateFormat("yyyy")
                String dateStr = day_date_format.format(date)
                String yearStr = year_format.format(date)
                String relStr = "${releaseString}"
                filter(ReplaceTokens, beginToken: '@', endToken: '@', tokens: [
                    'DATE_WITH_DAY' : dateStr,
                    'CURRENT_YEAR' : yearStr,
                    'RELEASE_STRING': relStr,
                    'PRODUCT_NAME': productName,
                    'PRODUCT_DESCRIPTION': productDescription,
                    'UNICODE_INFO' : '',
                    'PLATFORM' : '32-Bit Windows Version\nX32 '
                ])
                filteringCharset = 'UTF-8'
            }
        }
    }
    manifest(project(':subsystem_a:util_1')) {
        from('bin') { into('wintools') }
    }
    manifest(project) {
        from('bin') { into('wintools') }
    }

    packages.pkgZip(PkgZipInstallerPackage) { PkgZipInstallerPackage pkg ->
        pkg.BDRY = file('../zsfx_base/boundary.txt')
        pkg.ZSFX = file('../zsfx_base/zsfx_base/unzipsfx.exe')
        pkg.CSETUP = installer.destinationDirectory.file('wintools/CSetup.exe')
        pkg.ZNST = layout.buildDirectory.file(installerFileName) // NOTE: don't know where this is coming from
        pkg.installerBaseName = project.name
        pkg.codeSignCert = provider { rootProject.property('codeSignCert') }
        pkg.codeSignPassword = provider { rootProject.property('codeSignPassword') }
    }
}

tasks.named('debug') { dependsOn(installers.debug.destinationDirectory) }
tasks.named('release') { dependsOn(installers.release.destinationDirectory) }
