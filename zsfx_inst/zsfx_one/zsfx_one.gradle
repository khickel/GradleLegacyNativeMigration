import java.text.SimpleDateFormat
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'dev.nokee.cpp-application'
    id 'glm.windows-resources'
    id 'glm.afx-runtime'

    id 'glm.installer-base'
}

ext {
    installerFiles = [ (file("${buildDir}")):'zsfx_one' ]

    productName = 'SelfExtractingZipBasedInstaller_One'
    productDescription = 'GLM sample.'
    programDescription = "ZSFX_One - Installer"
    defaultPath = "C:\\\\Program Files\\\\ZSFX_One"
    serviceName = "GLM zsfx one"
    runProgram = "dummy\\\\dummy.exe"

    ZPKG = file("${buildDir}/pkg.zip").path

    targetPath = buildDir.path + '/install'

    installerFileName = "zsfx_one.exe"
    installerFilePath = file("${projectDir}/${installerFileName}").path
}

application(Configure.withDefaultApplicationConfiguration())
application(Configure.addParamH(tasks))
application { app ->
    targetMachines = [machines.windows.x86]
//    baseName = 'zsfx_one'

    cppSources.from fileTree(dir: '../zsfx_base', include: '*.cpp')

    parmsH {
        programDescription = "ZSFX_One - Installer"
        defaultPath = "C:\\\\Program Files\\\\ZSFX_One"
        serviceName = "GLM zsfx one"
        runProgram = "dummy\\\\dummy.exe"
    }

    // Add *.rc from this subproject directory to the link.
    windowsResources.from(fileTree(dir: '../zsfx_base', include: '*.rc'))
//
//    createPkgZipTask = tasks.register("createPkgZip", Exec) {
//        dependsOn(copyTasks, createVersionTextFile)
//        inputs.files(
//            "${targetPath}/wintools/util_1.exe",
//            "${targetPath}/wintools/LICENSE.txt",
//            "${targetPath}/wintools/VERSION.txt",
//        )
//
//        outputs.files(ZPKG)
//        delete ZPKG  // If the file already exists, the 7z command fails.
//        workingDir targetPath
//        commandLine "7z", "a", "-r", "${ZPKG}", "wintools/*"
//    }
}

//def instTaskMap = createZipInstallerTasks(project,
//                                          installerFileName, installerFilePath,
//                                          productName, productDescription,
//                                          programDescription, defaultPath,
//                                          serviceName, runProgram,
//                                          createPkgZip, targetPath, "**/*",
//                                          false)

installers {
    debug {}
    release {}
}
installers.all {
    manifest(project(':'), 'base') {
        into('wintools') {
            from('LICENSE') { rename('LICENSE', 'ZSFX_ONE_LICENSE.txt') }
            from(versionTextInputFilename) {
                rename(versionTextInputFilename, 'VERSION.txt')
                def date = new Date()
                def day_date_format = new SimpleDateFormat("EEE MM/dd/yyyy")
                def year_format = new SimpleDateFormat("yyyy")
                String dateStr = day_date_format.format(date)
                String yearStr = year_format.format(date)
                String relStr = "${releaseString}"
                filter(ReplaceTokens, beginToken: '@', endToken: '@', tokens: [
                    'DATE_WITH_DAY' : dateStr,
                    'CURRENT_YEAR' : yearStr,
                    'RELEASE_STRING': relStr,
                    'PRODUCT_NAME': productName,
                    'PRODUCT_DESCRIPTION': productDescription,
                    'UNICODE_INFO' : '',
                    'PLATFORM' : '32-Bit Windows Version\nX32 '
                ])
                filteringCharset = 'UTF-8'
            }
        }
    }
    manifest(project(':subsystem_a:util_1')) {
        from('bin') { into('wintools') }
    }
    // TODO: add local files
}

tasks.named('debug') { dependsOn(installers.debug.destinationDirectory) }
tasks.named('release') { dependsOn(installers.release.destinationDirectory) }