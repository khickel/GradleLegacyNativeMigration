////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Settings and methods for visual studio.

////////////////////////////////////////////////////////////////
def addWindowsResourceFile(Project prj, CppApplication app, String dir=".") {
    app.binaries.whenElementFinalized { bin ->
        def compileResources = prj.tasks.register("compileResources${bin.name.capitalize()}", WindowsResourceCompile) {
            targetPlatform = bin.compileTask.get().targetPlatform
            toolChain = bin.toolChain
            source.from prj.fileTree(dir: "${dir}", includes: ["*.rc"])
            // For some as yet not understood reason, if you just run "rc /v /l 0x409 Version.rc" in a VS command prompt, it works,
            // but when Gradle runs the command, rc.exe can't find the standard include files, so we have to use the INCLUDE env var.
            includes.from file(System.getenv('INCLUDE'))
            compilerArgs.addAll toolChain.map({ NativeToolChain toolChain ->
                if (toolChain instanceof VisualCpp) {
                    return [ "/v", "/l", "0x409" ]
                }
                return []
            }).get()
            it.outputDir = prj.layout.buildDirectory.dir("windows-resources/${bin.name}").get().asFile
        }

        bin.linkTask.get().configure {
            dependsOn compileResources
            source.from compileResources.map({ return prj.fileTree(dir: it.outputDir, includes: ["**/*.res","**/*.obj"]) })
            linkerArgs.addAll toolChain.map { NativeToolChain toolChain ->
                if (toolChain instanceof VisualCpp) {
                    return ["user32.lib"]
                }
                return []
            }
        }
    }
}


////////////////////////////////////////////////////////////////
// For some reason when run under gradle, the compiler isn't locating the AFX stuff by default,
// although if you just run the same command (get it from gradle build --debug redirected to a file),
// from the same command prompt, it works. 
def addAFXOptions(Project prj) {
    addVSCompilerOption(prj, '/I' + System.getenv('VCToolsInstallDir') + 'atlmfc\\include')
    AddVSExeLinkOption(prj, "/LIBPATH:" + System.getenv('VCToolsInstallDir') + 'atlmfc\\lib\\x86')
    AddVSExeLinkOption(prj, "/subsystem:windows")
}

////////////////////////////////////////////////////////////////
// Tasks to show compiler options and output
// from https://stackoverflow.com/questions/44126969/gradle-compiler-output-when-building-c-c-code/44691786#44691786
task showCompilerOptions {
   doLast {
      println '\n-----------------------------------------------------\n'
      println 'Compiler options:'
      FileTree tree = fileTree('build').include('**/options.txt')
      // Iterate over the contents of a tree
      tree.each {File file ->
          println 'Content of file ' + file + ':\n'
          println file.text
          println '------\n'
      }
   }
}
task showCompilerOutput {
   dependsOn showCompilerOptions
   doLast {
      println '\n-----------------------------------------------------\n'
      println 'Compiler output:'
      FileTree tree = fileTree('build').include('**/output.txt')
      // Iterate over the contents of a tree
      tree.each {File file ->
          println 'Content of file ' + file + ':\n'
          println file.text
          println '------\n'
      }
   }
}

// We need to "convert" our groovy method(s) to Closures, otherwise they won't be visible in
// other Gradle files.
// We wouldn't have to do this if these methods were in the root Gradle file, but this way
// we can refactor things to keep the root Gradle file cleaner.
// See https://stackoverflow.com/questions/18715137/extract-common-methods-from-gradle-build-script
ext {
    addDefaultCPPLibraryOptions = this.&addDefaultCPPLibraryOptions
    addDefaultCPPApplicationOptions = this.&addDefaultCPPApplicationOptions
    addWindowsResourceFile = this.&addWindowsResourceFile
    addAFXOptions = this.&addAFXOptions
    
}
