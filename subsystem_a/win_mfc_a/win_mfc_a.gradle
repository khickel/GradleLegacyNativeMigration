plugins {
    id 'dev.nokee.cpp-application'
    id 'glm.windows-resources'

    id 'glm.installation-manifest-base'
}

windowsResources.from(fileTree(dir: projectDir, includes: ['**/*.rc']))

application(Configure.withDefaultApplicationConfiguration())
application(Configure.addAFXOptions())
application { app ->
    // Set the executable filename
//    baseName = 'win_mfc_a'

    cppSources.from(fileTree(dir: projectDir, include: '*.cpp'))
    privateHeaders.from(projectDir)
}

installationManifests {
    debug {}
    release {}
}
installationManifests.all {
    def buildType = name
    from(application.variants
            .filter { it.buildVariant.hasAxisOf(application.buildTypes.named(buildType)) }
            .flatMap { it.first().developmentBinary }
            .flatMap {
                if (it.buildable) { return it.linkTask }
                return null // no buildable binaries
            }
            .flatMap { it.linkedFile }) {
        into('bin')
    }
}