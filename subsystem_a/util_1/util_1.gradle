plugins {
    id 'dev.nokee.native-application'
    id 'dev.nokee.cpp-language'
    id 'dev.nokee.c-language'
    id 'glm.windows-subsystem'
    id 'glm.installation-manifest-base'
}

if(isWindows) {
    plugins {
        id 'glm.code-signing'
    }
} else {
    println "Turning off code signing for ${project.getPath()}, not yet supported on Linux."
}

import dev.nokee.language.c.CHeaderSet
import dev.nokee.language.cpp.CppHeaderSet

ext {
    windowsSubsystem = 'console'
}

// Set the project standard C++ compiler/linker options
application(Configure.withDefaultApplicationConfiguration())
application { app->

    // Set the executable filename
    baseName = 'util_1'
    
    // Add *.cpp/*.c to the project
    sources {
        cpp { from(fileTree(dir: '.', include: '*.cpp')) }
        c { from(fileTree(dir: '.', include: '*.c')) }
        configureEach(CppHeaderSet) { from(isolatedFileTree(dir: projectDir, include: '*.h')) }
        configureEach(CHeaderSet) { from(isolatedFileTree(dir: projectDir, include: '*.h')) }
    }

    dependencies {
        implementation project(':static_lib')
    }
}

installationManifests {
    create('debug')
    create('release')
}
installationManifests.all {
    def buildType = name
    from(application.variants
            .filter { it.buildVariant.hasAxisOf(application.buildTypes.named(buildType)) }
            .map { it.find { it.developmentBinary.get().buildable } }
            .flatMap(Binaries.selectDevelopmentBinaryFile())) {
        into('bin')
    }
}
