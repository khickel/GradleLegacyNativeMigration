plugins {
    id 'dev.nokee.native-application'
    id 'dev.nokee.cpp-language'
    id 'dev.nokee.c-language'
    id 'code-sign'

    id 'glm.installation-manifest-base'
}

repositories {
    maven(RepositoryUtils.systemOpenSsl(project))
}

import dev.nokee.language.c.CHeaderSet
import dev.nokee.language.cpp.CppHeaderSet

// Set the project standard C++ compiler/linker options
application(withDefaultApplicationConfiguration())
application { app->

    // TODO(nokeedev): Support base name on the extension
//    // Set the executable filename
//    baseName = 'util_1'
    
    // Add *.cpp/*.c to the project
    sources {
        cpp { from(fileTree(dir: '.', include: '*.cpp')) }
        c { from(fileTree(dir: '.', include: '*.c')) }
        configureEach(CppHeaderSet) { from(projectDir) }
        configureEach(CHeaderSet) { from(projectDir) }
    }

    // TODO(daniel): reenable subsystem windows or add a project that shows usage for subsystem windows
//    addVSLinkerOption("/subsystem:windows").call(app)

    dependencies {
        implementation project(':static_lib')
    }
}

installationManifests {
    debug
    release
}
installationManifests.all {
    def buildType = name
    from(application.variants
            .filter { it.buildVariant.hasAxisOf(application.buildTypes.named(buildType)) }
            .flatMap { it.first().developmentBinary }
            .flatMap { it.linkTask }
            .flatMap { it.linkedFile }) {
        into('bin')
    }
}