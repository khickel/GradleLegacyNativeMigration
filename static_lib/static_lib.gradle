import dev.nokee.language.cpp.CppHeaderSet
import dev.nokee.language.c.CHeaderSet

plugins {
    id 'dev.nokee.native-library'
    id 'dev.nokee.cpp-language'
    id 'dev.nokee.c-language'
}

library(Configure.withDefaultLibraryConfiguration())
library { lib->
    targetLinkages = [linkages.static]

    sources {
        cpp { from(fileTree(dir: '.', include: '*.cpp')) }
        c { from(fileTree(dir: '.', include: '*.c')) }
        configureEach(CppHeaderSet) { from(projectDir) }
        configureEach(CHeaderSet) { from(projectDir) }
    }

     dependencies {
         implementation 'system.OpenSSL:libcrypto:1.1.1h'
         implementation 'system.OpenSSL:libssl:1.1.1h'
     }

    // TODO-KFH temp change to try to figure out what is bringing in DriverSpec.h
    // TODO(nokeedev): Figuring out where a header comes from should be made easy with Nokee by exposing the data it already acquire during compilation
    //    This is a common question in the native ecosystem.
//    binaries.configureEach {
//        compileTasks.configureEach {
//            compilerArgs.add('/showIncludes')
//        }
//    }
}
